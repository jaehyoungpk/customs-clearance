version: '3.8'

services:
  ai-gateway:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DEBUG=true
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://postgres:password@postgres:5432/customs_ai_db
      - REDIS_URL=redis://redis:6379/0
      - SPRING_BOOT_BASE_URL=http://host.docker.internal:8080
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - customs-network

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=customs_ai_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - customs-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - customs-network

  model-ocr:
    build:
      context: ../models/model-ocr
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - AZURE_ENDPOINT=${AZURE_ENDPOINT}
      - AZURE_API_KEY=${AZURE_API_KEY}
    restart: unless-stopped
    networks:
      - customs-network

  model-report:
    build:
      context: ../models/model-report
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    restart: unless-stopped
    networks:
      - customs-network

  # RAG 기반 관세법 전문 챗봇 서비스
  model-chatbot-fastapi:
    build:
      context: ../models/model-chatbot-fastapi
      dockerfile: Dockerfile
    container_name: ai-gateway-chatbot-fastapi
    ports:
      - "8004:8004"
    environment:
      # OpenAI 설정
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=gpt-4.1-mini
      
      # data-tier PostgreSQL 연결
      - POSTGRES_HOST=host.docker.internal
      - POSTGRES_PORT=5433
      - POSTGRES_DB=conversations
      - POSTGRES_USER=chatbot_user
      - POSTGRES_PASSWORD=chatbot_pass123
      
      # data-tier Redis 연결
      - REDIS_HOST=host.docker.internal
      - REDIS_PORT=6380
      - REDIS_DB=0
      
      # data-tier ChromaDB 연결
      - CHROMADB_MODE=docker
      - CHROMADB_HOST=host.docker.internal
      - CHROMADB_PORT=8011
      
      # 애플리케이션 설정
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
    restart: unless-stopped
    networks:
      - customs-network
    # data-tier 의존성은 외부에서 관리됨
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 3


volumes:
  postgres_data:
  redis_data:

networks:
  customs-network:
    driver: bridge